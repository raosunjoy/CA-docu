// Zetra Platform - Database Schema
// Unified Productivity Platform for Indian CA Firms

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role Enum
enum UserRole {
  PARTNER
  MANAGER
  ASSOCIATE
  INTERN
  ADMIN
}

// Task Status Enum
enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

// Task Priority Enum
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Channel Type Enum
enum ChannelType {
  DIRECT
  GROUP
  TASK
  CLIENT
}

// Message Type Enum
enum MessageType {
  TEXT
  FILE
  TASK_REFERENCE
  EMAIL_REFERENCE
}

// Core Organization Model
model Organization {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  tags       Tag[]
  tasks      Task[]
  documents  Document[]
  documentFolders DocumentFolder[]
  emails     Email[]
  chatChannels ChatChannel[]
  auditLogs  AuditLog[]

  @@map("organizations")
}

// User Management
model User {
  id             String    @id @default(cuid())
  organizationId String
  email          String    @unique
  passwordHash   String?
  firstName      String
  lastName       String
  role           UserRole
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Created content
  createdTasks      Task[]         @relation("TaskCreator")
  assignedTasks     Task[]         @relation("TaskAssignee")
  lockedTasks       Task[]         @relation("TaskLocker")
  uploadedDocuments Document[]     @relation("DocumentUploader")
  createdTags       Tag[]          @relation("TagCreator")
  emails            Email[]        @relation("EmailOwner")
  sentMessages      ChatMessage[]  @relation("MessageSender")
  createdChannels   ChatChannel[]  @relation("ChannelCreator")
  taggedBy          Tagging[]      @relation("TaggerUser")
  auditLogs         AuditLog[]     @relation("AuditUser")
  syncStatus        SyncStatus[]
  taskComments      TaskComment[]
  taskAttachments   TaskAttachment[]
  channelMemberships ChatChannelMember[]
  
  // Document Management relations
  createdFolders    DocumentFolder[]    @relation("FolderCreator")
  documentAnnotations DocumentAnnotation[] @relation("DocumentAnnotator")
  sharedDocuments   DocumentShare[]     @relation("DocumentSharer")
  receivedShares    DocumentShare[]     @relation("DocumentRecipient")
  documentComments  DocumentComment[]   @relation("DocumentCommenter")
  folderPermissions FolderPermission[]  @relation("FolderPermissionUser")

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@map("users")
}

// Hierarchical Tag System
model Tag {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  parentId       String?
  color          String?   // Hex color code
  description    String?
  createdBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User?        @relation("TagCreator", fields: [createdBy], references: [id])
  parent       Tag?         @relation("TagHierarchy", fields: [parentId], references: [id])
  children     Tag[]        @relation("TagHierarchy")
  taggings     Tagging[]

  @@unique([organizationId, name, parentId])
  @@index([organizationId])
  @@index([parentId])
  @@map("tags")
}

// Task Management
model Task {
  id             String        @id @default(cuid())
  organizationId String
  title          String
  description    String?
  status         TaskStatus    @default(TODO)
  priority       TaskPriority  @default(MEDIUM)
  assignedTo     String?
  createdBy      String
  parentTaskId   String?
  dueDate        DateTime?
  completedAt    DateTime?
  lockedAt       DateTime?
  lockedBy       String?
  estimatedHours Int?
  actualHours    Int?
  metadata       Json          @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedUser   User?        @relation("TaskAssignee", fields: [assignedTo], references: [id])
  createdByUser  User         @relation("TaskCreator", fields: [createdBy], references: [id])
  lockedByUser   User?        @relation("TaskLocker", fields: [lockedBy], references: [id])
  parentTask     Task?        @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  childTasks     Task[]       @relation("TaskHierarchy")
  comments       TaskComment[]
  attachments    TaskAttachment[]

  @@index([organizationId])
  @@index([assignedTo])
  @@index([status])
  @@index([dueDate])
  @@index([createdBy])
  @@index([parentTaskId])
  @@map("tasks")
}

// Task Comments
model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@map("task_comments")
}

// Task Attachments
model TaskAttachment {
  id         String  @id @default(cuid())
  taskId     String
  documentId String?
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  createdAt  DateTime @default(now())

  // Relations
  task     Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [uploadedBy], references: [id])
  document Document? @relation(fields: [documentId], references: [id])

  @@index([taskId])
  @@index([documentId])
  @@map("task_attachments")
}

// Document Management
model Document {
  id               String         @id @default(cuid())
  organizationId   String
  name             String
  originalName     String?        // Original filename
  description      String?
  filePath         String         // Current file path
  localPath        String?        // Local sync path
  cloudPath        String?        // Cloud storage path
  thumbnailPath    String?        // Preview/thumbnail path
  fileSize         Int
  mimeType         String
  checksum         String?        // For integrity and deduplication
  type             DocumentType   @default(OTHER)
  status           DocumentStatus @default(ACTIVE)
  version          Int            @default(1)
  parentDocumentId String?
  folderId         String?        // Reference to DocumentFolder
  uploadedBy       String
  uploadedAt       DateTime       @default(now())
  lastAccessedAt   DateTime?
  extractedText    String?        // OCR/searchable text
  metadata         Json           @default("{}")
  isDeleted        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  organization     Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader         User                @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  folder           DocumentFolder?     @relation(fields: [folderId], references: [id])
  parentDocument   Document?           @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments   Document[]          @relation("DocumentVersions")
  
  // Enhanced relations for document management
  annotations      DocumentAnnotation[]
  shares           DocumentShare[]
  comments         DocumentComment[]
  taskAttachments  TaskAttachment[]
  // Note: Taggings are handled via polymorphic relations in application code

  @@index([organizationId])
  @@index([uploadedBy])
  @@index([folderId])
  @@index([status])
  @@index([type])
  @@index([checksum])
  @@index([createdAt])
  @@map("documents")
}

// Email Integration
model Email {
  id           String   @id @default(cuid())
  organizationId String
  externalId   String   @unique
  threadId     String?
  subject      String?
  fromAddress  String
  toAddresses  String[]
  ccAddresses  String[]
  bccAddresses String[]
  bodyText     String?
  bodyHtml     String?
  receivedAt   DateTime
  syncedAt     DateTime @default(now())
  userId       String
  createdAt    DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation("EmailOwner", fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([receivedAt])
  @@index([externalId])
  @@map("emails")
}

// Chat System
model ChatChannel {
  id             String      @id @default(cuid())
  organizationId String
  name           String
  type           ChannelType
  metadata       Json        @default("{}")
  createdBy      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User         @relation("ChannelCreator", fields: [createdBy], references: [id])
  messages     ChatMessage[]
  members      ChatChannelMember[]

  @@index([organizationId])
  @@map("chat_channels")
}

model ChatChannelMember {
  id        String   @id @default(cuid())
  channelId String
  userId    String
  joinedAt  DateTime @default(now())

  // Relations
  channel ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id])

  @@unique([channelId, userId])
  @@map("chat_channel_members")
}

model ChatMessage {
  id          String      @id @default(cuid())
  channelId   String
  userId      String
  content     String
  messageType MessageType @default(TEXT)
  metadata    Json        @default("{}")
  repliedToId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  channel   ChatChannel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User         @relation("MessageSender", fields: [userId], references: [id])
  repliedTo ChatMessage? @relation("MessageReplies", fields: [repliedToId], references: [id])
  replies   ChatMessage[] @relation("MessageReplies")

  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
  @@map("chat_messages")
}

// Polymorphic Tagging System
model Tagging {
  id           String @id @default(cuid())
  tagId        String
  taggableType String // 'task', 'document', 'email', 'chat_channel'
  taggableId   String
  taggedBy     String?
  createdAt    DateTime @default(now())

  // Relations
  tag    Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagger User? @relation("TaggerUser", fields: [taggedBy], references: [id])

  // Note: Polymorphic relations are handled in application code
  // taggableType and taggableId reference different models based on type

  @@unique([tagId, taggableType, taggableId])
  @@index([tagId])
  @@index([taggableType, taggableId])
  @@map("taggings")
}

// Audit Trail
model AuditLog {
  id           String   @id @default(cuid())
  organizationId String
  userId       String?
  action       String   // 'create', 'update', 'delete', 'view'
  resourceType String   // 'task', 'document', etc.
  resourceId   String
  oldValues    Json?
  newValues    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation("AuditUser", fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Sync Status Tracking
model SyncStatus {
  id             String   @id @default(cuid())
  userId         String
  deviceId       String
  lastSyncAt     DateTime @default(now())
  syncVersion    Int      @default(1)
  pendingChanges Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("sync_status")
}

// Document Management System
enum DocumentType {
  PDF
  WORD
  EXCEL
  IMAGE
  OTHER
}

enum DocumentStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
}


model DocumentFolder {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  parentId       String?
  path           String   // Full folder path for easy queries
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User             @relation("FolderCreator", fields: [createdBy], references: [id])
  parent         DocumentFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children       DocumentFolder[] @relation("FolderHierarchy")
  documents      Document[]
  permissions    FolderPermission[]
  // Note: Taggings are handled via polymorphic relations in application code

  @@index([organizationId])
  @@index([createdBy])
  @@index([parentId])
  @@index([path])
  @@map("document_folders")
}

model DocumentAnnotation {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  type       String   // 'highlight', 'comment', 'drawing', etc.
  content    String?  // Annotation text/content
  position   Json     // Page/position data
  style      Json?    // Color, size, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation("DocumentAnnotator", fields: [userId], references: [id])

  @@index([documentId])
  @@index([userId])
  @@map("document_annotations")
}

model DocumentShare {
  id           String    @id @default(cuid())
  documentId   String
  sharedBy     String
  sharedWith   String?   // User ID, null for public/link shares
  shareType    String    // 'user', 'link', 'public'
  permissions  String[]  // 'view', 'comment', 'edit', 'download'
  expiresAt    DateTime?
  accessCount  Int       @default(0)
  lastAccessed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharer       User      @relation("DocumentSharer", fields: [sharedBy], references: [id])
  recipient    User?     @relation("DocumentRecipient", fields: [sharedWith], references: [id])

  @@index([documentId])
  @@index([sharedBy])
  @@index([sharedWith])
  @@index([shareType])
  @@map("document_shares")
}

model DocumentComment {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  content    String
  parentId   String?  // For threaded comments
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  document   Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User              @relation("DocumentCommenter", fields: [userId], references: [id])
  parent     DocumentComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    DocumentComment[] @relation("CommentReplies")

  @@index([documentId])
  @@index([userId])
  @@index([parentId])
  @@map("document_comments")
}

model FolderPermission {
  id         String   @id @default(cuid())
  folderId   String
  userId     String?
  role       UserRole?
  permissions String[] // 'view', 'upload', 'edit', 'delete', 'share'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  folder     DocumentFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user       User?          @relation("FolderPermissionUser", fields: [userId], references: [id])

  @@unique([folderId, userId])
  @@unique([folderId, role])
  @@index([folderId])
  @@index([userId])
  @@index([role])
  @@map("folder_permissions")
}
