openapi: 3.0.3
info:
  title: Zetra Platform API
  description: |
    Comprehensive API documentation for the Zetra Platform - an enterprise-grade productivity platform for CA firms.
    
    ## Authentication
    The API uses JWT-based authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <jwt_token>
    ```
    
    ## Rate Limiting
    API requests are rate-limited to prevent abuse:
    - 1000 requests per hour for authenticated users
    - 100 requests per hour for unauthenticated users
    
    ## Error Handling
    The API returns consistent error responses with the following structure:
    ```json
    {
      "success": false,
      "error": {
        "type": "VALIDATION_ERROR",
        "code": "INVALID_INPUT",
        "message": "Validation failed",
        "details": {...}
      }
    }
    ```
  version: 1.0.0
  contact:
    name: Zetra Platform API Support
    email: api-support@zetraplatform.com
    url: https://docs.zetraplatform.com
  license:
    name: Proprietary
    url: https://zetraplatform.com/license

servers:
  - url: https://api.zetraplatform.com/v1
    description: Production server
  - url: https://staging-api.zetraplatform.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
                rememberMe:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        $ref: '#/components/schemas/User'
                      expiresAt:
                        type: string
                        format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - organizationId
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                organizationId:
                  type: string
                  format: uuid
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Task Management Endpoints
  /tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      description: Retrieve a paginated list of tasks with filtering options
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: assignedTo
          in: query
          schema:
            type: string
            format: uuid
        - name: priority
          in: query
          schema:
            $ref: '#/components/schemas/TaskPriority'
        - name: dueDate
          in: query
          schema:
            type: string
            format: date
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - organizationId
              properties:
                title:
                  type: string
                  maxLength: 255
                description:
                  type: string
                organizationId:
                  type: string
                  format: uuid
                assignedTo:
                  type: string
                  format: uuid
                priority:
                  $ref: '#/components/schemas/TaskPriority'
                dueDate:
                  type: string
                  format: date-time
                tags:
                  type: array
                  items:
                    type: string
                parentTaskId:
                  type: string
                  format: uuid
                templateId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task
      description: Retrieve a specific task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 255
                description:
                  type: string
                status:
                  $ref: '#/components/schemas/TaskStatus'
                assignedTo:
                  type: string
                  format: uuid
                priority:
                  $ref: '#/components/schemas/TaskPriority'
                dueDate:
                  type: string
                  format: date-time
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a task (soft delete)
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Document Management Endpoints
  /documents:
    get:
      tags:
        - Documents
      summary: List documents
      description: Retrieve a paginated list of documents
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: folderId
          in: query
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/DocumentType'
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      documents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'
                      pagination:
                        $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Documents
      summary: Upload document
      description: Upload a new document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - organizationId
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                description:
                  type: string
                organizationId:
                  type: string
                  format: uuid
                folderId:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Document'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        organizationId:
          type: string
          format: uuid
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRole:
      type: string
      enum:
        - PARTNER
        - MANAGER
        - ASSOCIATE
        - INTERN
        - CLIENT

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        assignedTo:
          type: string
          format: uuid
        createdBy:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskStatus:
      type: string
      enum:
        - TODO
        - IN_PROGRESS
        - IN_REVIEW
        - COMPLETED
        - CANCELLED

    TaskPriority:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - URGENT

    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        originalName:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/DocumentType'
        fileSize:
          type: integer
        mimeType:
          type: string
        organizationId:
          type: string
          format: uuid
        folderId:
          type: string
          format: uuid
        uploadedBy:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DocumentType:
      type: string
      enum:
        - PDF
        - WORD
        - EXCEL
        - POWERPOINT
        - IMAGE
        - OTHER

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            type:
              type: string
              example: VALIDATION_ERROR
            code:
              type: string
              example: INVALID_INPUT
            message:
              type: string
              example: Validation failed
            details:
              type: object

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              type: BAD_REQUEST
              code: INVALID_REQUEST
              message: The request is invalid

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              type: AUTHENTICATION_ERROR
              code: UNAUTHORIZED
              message: Authentication required

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              type: NOT_FOUND_ERROR
              code: RESOURCE_NOT_FOUND
              message: The requested resource was not found

    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              type: CONFLICT_ERROR
              code: RESOURCE_CONFLICT
              message: The resource already exists

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              type: VALIDATION_ERROR
              code: INVALID_INPUT
              message: Validation failed
              details:
                email: Email is required
                password: Password must be at least 8 characters

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Tasks
    description: Task management operations
  - name: Documents
    description: Document management operations
  - name: Email
    description: Email integration operations
  - name: Chat
    description: Real-time chat operations
  - name: Analytics
    description: Analytics and reporting operations