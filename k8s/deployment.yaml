# Kubernetes Deployment Configuration for Zetra Platform
# Implements horizontal scaling, health checks, and resource management

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zetra-platform
  namespace: zetra
  labels:
    app: zetra-platform
    version: v1.0.0
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: zetra-platform
  template:
    metadata:
      labels:
        app: zetra-platform
        version: v1.0.0
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      containers:
      - name: zetra-app
        image: zetra/platform:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: zetra-secrets
              key: database-url
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zetra-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: zetra-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: zetra-secrets
              key: encryption-key
        - name: CDN_ENABLED
          value: "true"
        - name: CDN_BASE_URL
          value: "https://cdn.zetra.com"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: temp-storage
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: app-config
        configMap:
          name: zetra-config
      - name: temp-storage
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - zetra-platform
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: zetra-platform-service
  namespace: zetra
  labels:
    app: zetra-platform
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app: zetra-platform
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: zetra-platform-hpa
  namespace: zetra
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: zetra-platform
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zetra-platform-pdb
  namespace: zetra
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: zetra-platform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zetra-config
  namespace: zetra
data:
  app.json: |
    {
      "server": {
        "port": 3000,
        "host": "0.0.0.0"
      },
      "database": {
        "connectionPoolSize": 20,
        "queryTimeout": 30000,
        "idleTimeout": 600000
      },
      "cache": {
        "redis": {
          "keyPrefix": "zetra:",
          "maxRetries": 3,
          "retryDelayOnFailover": 100
        },
        "memory": {
          "maxSize": 1000,
          "ttl": 300000
        }
      },
      "performance": {
        "enableCompression": true,
        "enableCaching": true,
        "maxRequestSize": "10mb",
        "requestTimeout": 30000
      },
      "security": {
        "enableRateLimit": true,
        "maxRequestsPerMinute": 1000,
        "enableCors": true,
        "enableHelmet": true
      },
      "monitoring": {
        "enableMetrics": true,
        "enableTracing": true,
        "enableHealthChecks": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: zetra-secrets
  namespace: zetra
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAaG9zdDpwb3J0L2RhdGFiYXNl
  redis-password: cmVkaXNwYXNzd29yZA==
  jwt-secret: and0c2VjcmV0a2V5Zm9yand0dG9rZW5z
  encryption-key: ZW5jcnlwdGlvbmtleWZvcmRhdGFlbmNyeXB0aW9u

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zetra-platform-netpol
  namespace: zetra
spec:
  podSelector:
    matchLabels:
      app: zetra-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53